import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

type GameMode = 'menu' | 'flood' | 'fire';

interface Scenario {
  id: number;
  question: string;
  options: {
    text: string;
    correct: boolean;
    explanation: string;
  }[];
}

const floodScenarios: Scenario[] = [
  {
    id: 1,
    question: '–û–±—ä—è–≤–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–∏. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?',
    options: [
      { text: '–°–æ–±—Ä–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ü–µ–Ω–Ω—ã–µ –≤–µ—â–∏', correct: true, explanation: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤–∞–∂–Ω—ã–µ –≤–µ—â–∏ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ.' },
      { text: '–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–±–æ—Ä—ã', correct: false, explanation: '–ù–µ—Ç! –ù–∞–æ–±–æ—Ä–æ—Ç, –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥ —ç–≤–∞–∫—É–∞—Ü–∏–µ–π.' },
      { text: '–°–ø—Ä—è—Ç–∞—Ç—å—Å—è –≤ –ø–æ–¥–≤–∞–ª–µ', correct: false, explanation: '–ù–µ—Ç! –ü–æ–¥–≤–∞–ª –ø–µ—Ä–≤—ã–º –∑–∞—Ç–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –≤–æ–¥–æ–π.' },
    ],
  },
  {
    id: 2,
    question: '–í–æ–¥–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–±—ã–≤–∞—Ç—å. –ö—É–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è?',
    options: [
      { text: '–ù–∞ –≤–µ—Ä—Ö–Ω–∏–µ —ç—Ç–∞–∂–∏ –∏–ª–∏ –∫—Ä—ã—à—É', correct: true, explanation: '–í–µ—Ä–Ω–æ! –í—ã—Å–æ—Ç–∞ - –≥–ª–∞–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≤–æ–¥—ã.' },
      { text: '–í –ø–æ–¥–≤–∞–ª', correct: false, explanation: '–û–ø–∞—Å–Ω–æ! –ü–æ–¥–≤–∞–ª –∑–∞—Ç–æ–ø–∏—Ç –ø–µ—Ä–≤—ã–º.' },
      { text: '–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º —ç—Ç–∞–∂–µ', correct: false, explanation: '–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ! –ù—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å—Å—è –ø–æ–≤—ã—à–µ.' },
    ],
  },
  {
    id: 3,
    question: '–¢—ã –≤–∏–¥–∏—à—å —Å–ø–∞—Å–∞—Ç–µ–ª–µ–π –Ω–∞ –ª–æ–¥–∫–µ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?',
    options: [
      { text: '–ü–æ–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª —è—Ä–∫–æ–π —Ç–∫–∞–Ω—å—é –∏–ª–∏ —Ñ–æ–Ω–∞—Ä–∏–∫–æ–º', correct: true, explanation: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–∞–∫ —Å–ø–∞—Å–∞—Ç–µ–ª–∏ —Ç–µ–±—è –±—ã—Å—Ç—Ä–µ–µ —É–≤–∏–¥—è—Ç.' },
      { text: '–ü—Ä—ã–≥–Ω—É—Ç—å –≤ –≤–æ–¥—É –∏ –ø–ª—ã—Ç—å –∫ –Ω–∏–º', correct: false, explanation: '–û–ø–∞—Å–Ω–æ! –¢–µ—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–ª—å–Ω—ã–º, –∂–¥–∏ –ø–æ–º–æ—â–∏.' },
      { text: '–°–ø—Ä—è—Ç–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ –¥–æ–º–∞', correct: false, explanation: '–ù–µ—Ç! –ù—É–∂–Ω–æ –¥–∞—Ç—å –∑–Ω–∞—Ç—å, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å.' },
    ],
  },
];

const fireScenarios: Scenario[] = [
  {
    id: 1,
    question: '–¢—ã —É–≤–∏–¥–µ–ª –¥—ã–º –≤ –ª–µ—Å—É. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?',
    options: [
      { text: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å 112 –∏ —Å–æ–æ–±—â–∏—Ç—å –≤–∑—Ä–æ—Å–ª—ã–º', correct: true, explanation: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∂–∞—Ä–Ω—ã–µ –ø—Ä–∏–µ–¥—É—Ç –±—ã—Å—Ç—Ä–µ–µ, –µ—Å–ª–∏ —É–∑–Ω–∞—é—Ç —Å—Ä–∞–∑—É.' },
      { text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ—Ç—É—à–∏—Ç—å —Å–∞–º–æ–º—É', correct: false, explanation: '–û–ø–∞—Å–Ω–æ! –ü–æ–∂–∞—Ä —Ç—É—à–∞—Ç —Ç–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã.' },
      { text: '–ü–æ–¥–æ–π—Ç–∏ –ø–æ–±–ª–∏–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', correct: false, explanation: '–û—á–µ–Ω—å –æ–ø–∞—Å–Ω–æ! –û—Ç –æ–≥–Ω—è –Ω—É–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å—Å—è –ø–æ–¥–∞–ª—å—à–µ.' },
    ],
  },
  {
    id: 2,
    question: '–ü–æ–∂–∞—Ä –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –¥–æ–º—É. –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
    options: [
      { text: '–£–π—Ç–∏ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ–≥–Ω—è', correct: true, explanation: '–í–µ—Ä–Ω–æ! –¢–∞–∫ —Ç—ã –±—ã—Å—Ç—Ä–µ–µ –æ–∫–∞–∂–µ—à—å—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.' },
      { text: '–ë–µ–∂–∞—Ç—å –Ω–∞–≤—Å—Ç—Ä–µ—á—É –æ–≥–Ω—é', correct: false, explanation: '–û—á–µ–Ω—å –æ–ø–∞—Å–Ω–æ! –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–¥–∏ –∫ –æ–≥–Ω—é.' },
      { text: '–°–ø—Ä—è—Ç–∞—Ç—å—Å—è –≤ –¥–æ–º–µ', correct: false, explanation: '–û–ø–∞—Å–Ω–æ! –î–æ–º –º–æ–∂–µ—Ç –∑–∞–≥–æ—Ä–µ—Ç—å—Å—è, –Ω—É–∂–Ω–æ —ç–≤–∞–∫—É–∏—Ä–æ–≤–∞—Ç—å—Å—è.' },
    ],
  },
  {
    id: 3,
    question: '–í –¥–æ–º–µ –∑–∞–¥—ã–º–ª–µ–Ω–∏–µ. –ö–∞–∫ –Ω—É–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è?',
    options: [
      { text: '–ü—Ä–∏–≥–Ω—É–≤—à–∏—Å—å –∏–ª–∏ –ø–æ–ª–∑–∫–æ–º, –ø—Ä–∏–∫—Ä—ã–≤ –Ω–æ—Å —Ç–∫–∞–Ω—å—é', correct: true, explanation: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–Ω–∏–∑—É –º–µ–Ω—å—à–µ –¥—ã–º–∞, –∞ —Ç–∫–∞–Ω—å –∑–∞—â–∏—Ç–∏—Ç –¥—ã—Ö–∞–Ω–∏–µ.' },
      { text: '–í—Å—Ç–∞—Ç—å –≤–æ –≤–µ—Å—å —Ä–æ—Å—Ç', correct: false, explanation: '–û–ø–∞—Å–Ω–æ! –ù–∞–≤–µ—Ä—Ö—É –±–æ–ª—å—à–µ —è–¥–æ–≤–∏—Ç–æ–≥–æ –¥—ã–º–∞.' },
      { text: '–ë–µ–∂–∞—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ', correct: false, explanation: '–ù–µ—Ç! –ù—É–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, –ø—Ä–∏–≥–Ω—É–≤—à–∏—Å—å.' },
    ],
  },
];

export default function Index() {
  const [gameMode, setGameMode] = useState<GameMode>('menu');
  const [currentScenario, setCurrentScenario] = useState(0);
  const [score, setScore] = useState(0);
  const [showExplanation, setShowExplanation] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [completedScenarios, setCompletedScenarios] = useState(0);
  const { toast } = useToast();

  const scenarios = gameMode === 'flood' ? floodScenarios : fireScenarios;
  const maxScenarios = scenarios.length;

  const handleAnswer = (optionIndex: number) => {
    if (showExplanation) return;

    const option = scenarios[currentScenario].options[optionIndex];
    setSelectedAnswer(optionIndex);
    setShowExplanation(true);

    if (option.correct) {
      setScore(score + 10);
      toast({
        title: 'üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!',
        description: option.explanation,
        duration: 3000,
      });
    } else {
      toast({
        title: '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ',
        description: option.explanation,
        variant: 'destructive',
        duration: 3000,
      });
    }
  };

  const nextScenario = () => {
    if (currentScenario < scenarios.length - 1) {
      setCurrentScenario(currentScenario + 1);
      setCompletedScenarios(completedScenarios + 1);
      setShowExplanation(false);
      setSelectedAnswer(null);
    } else {
      setGameMode('menu');
      setCurrentScenario(0);
      setCompletedScenarios(0);
      setShowExplanation(false);
      setSelectedAnswer(null);
      
      toast({
        title: 'üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
        description: `–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score + (scenarios[currentScenario].options[selectedAnswer!]?.correct ? 10 : 0)} –±–∞–ª–ª–æ–≤ –∏–∑ ${scenarios.length * 10}`,
        duration: 5000,
      });
    }
  };

  const resetGame = () => {
    setGameMode('menu');
    setCurrentScenario(0);
    setScore(0);
    setShowExplanation(false);
    setSelectedAnswer(null);
    setCompletedScenarios(0);
  };

  if (gameMode === 'menu') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-orange-50 p-4 md:p-8">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-12 animate-fade-in">
            <h1 className="text-5xl md:text-7xl font-bold text-primary mb-4 animate-scale-in">
              –®–∫–æ–ª–∞ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ üéì
            </h1>
            <p className="text-xl md:text-2xl text-muted-foreground font-medium">
              –£—á–∏—Å—å –ø—Ä–∞–≤–∏–ª–∞–º –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —á—Ä–µ–∑–≤—ã—á–∞–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö!
            </p>
          </div>

          <div className="grid md:grid-cols-2 gap-6 max-w-4xl mx-auto">
            <Card 
              className="p-8 cursor-pointer hover:scale-105 transition-all duration-300 bg-gradient-to-br from-blue-100 to-blue-200 border-4 border-blue-300 shadow-xl hover:shadow-2xl animate-fade-in"
              onClick={() => setGameMode('flood')}
            >
              <div className="text-center space-y-6">
                <div className="text-8xl animate-bounce-gentle">üåä</div>
                <h2 className="text-3xl font-bold text-blue-800">–ù–∞–≤–æ–¥–Ω–µ–Ω–∏–µ</h2>
                <p className="text-lg text-blue-700 font-medium">
                  –£–∑–Ω–∞–π, –∫–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–±—è –≤–æ –≤—Ä–µ–º—è –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è –∏ —Å–ø–∞—Å—Ç–∏—Å—å –æ—Ç –±–æ–ª—å—à–æ–π –≤–æ–¥—ã
                </p>
                <Button size="lg" className="w-full text-xl py-6 bg-secondary hover:bg-secondary/90 font-bold">
                  –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                  <Icon name="Play" className="ml-2" size={24} />
                </Button>
              </div>
            </Card>

            <Card 
              className="p-8 cursor-pointer hover:scale-105 transition-all duration-300 bg-gradient-to-br from-orange-100 to-red-200 border-4 border-orange-300 shadow-xl hover:shadow-2xl animate-fade-in"
              style={{ animationDelay: '0.1s' }}
              onClick={() => setGameMode('fire')}
            >
              <div className="text-center space-y-6">
                <div className="text-8xl animate-bounce-gentle" style={{ animationDelay: '0.3s' }}>üî•</div>
                <h2 className="text-3xl font-bold text-orange-800">–ü–æ–∂–∞—Ä</h2>
                <p className="text-lg text-orange-700 font-medium">
                  –ù–∞—É—á–∏—Å—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–∂–∞—Ä–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                </p>
                <Button size="lg" className="w-full text-xl py-6 bg-accent hover:bg-accent/90 font-bold">
                  –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                  <Icon name="Play" className="ml-2" size={24} />
                </Button>
              </div>
            </Card>
          </div>

          <div className="mt-12 text-center animate-fade-in" style={{ animationDelay: '0.2s' }}>
            <Card className="p-6 max-w-2xl mx-auto bg-gradient-to-r from-purple-100 to-pink-100 border-4 border-purple-300">
              <h3 className="text-2xl font-bold text-purple-800 mb-4">
                ‚ú® –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?
              </h3>
              <div className="space-y-3 text-left text-lg">
                <div className="flex items-start gap-3">
                  <span className="text-2xl">1Ô∏è‚É£</span>
                  <p className="text-purple-700 font-medium">–í—ã–±–µ—Ä–∏ —Å–∏—Ç—É–∞—Ü–∏—é: –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∂–∞—Ä</p>
                </div>
                <div className="flex items-start gap-3">
                  <span className="text-2xl">2Ô∏è‚É£</span>
                  <p className="text-purple-700 font-medium">–ß–∏—Ç–∞–π –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–±–∏—Ä–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç</p>
                </div>
                <div className="flex items-start gap-3">
                  <span className="text-2xl">3Ô∏è‚É£</span>
                  <p className="text-purple-700 font-medium">–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∞–π 10 –±–∞–ª–ª–æ–≤!</p>
                </div>
              </div>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  const currentQuestion = scenarios[currentScenario];
  const isFlood = gameMode === 'flood';

  return (
    <div className={`min-h-screen p-4 md:p-8 ${
      isFlood 
        ? 'bg-gradient-to-br from-blue-50 via-cyan-50 to-blue-100' 
        : 'bg-gradient-to-br from-orange-50 via-red-50 to-yellow-100'
    }`}>
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center justify-between mb-8 animate-fade-in">
          <Button 
            variant="outline" 
            size="lg"
            onClick={resetGame}
            className="font-bold text-lg border-2"
          >
            <Icon name="Home" className="mr-2" size={24} />
            –í –º–µ–Ω—é
          </Button>
          
          <div className="flex items-center gap-4">
            <div className={`text-2xl font-bold px-6 py-3 rounded-2xl border-4 ${
              isFlood 
                ? 'bg-blue-200 border-blue-400 text-blue-800' 
                : 'bg-orange-200 border-orange-400 text-orange-800'
            }`}>
              <Icon name="Star" className="inline mr-2" size={24} />
              {score} –±–∞–ª–ª–æ–≤
            </div>
          </div>
        </div>

        <div className="mb-8 animate-fade-in">
          <div className="flex items-center justify-between mb-3">
            <span className="text-xl font-bold text-foreground">
              –í–æ–ø—Ä–æ—Å {currentScenario + 1} –∏–∑ {maxScenarios}
            </span>
            <span className="text-lg font-semibold text-muted-foreground">
              {Math.round((completedScenarios / maxScenarios) * 100)}% –ø—Ä–æ–π–¥–µ–Ω–æ
            </span>
          </div>
          <Progress value={(completedScenarios / maxScenarios) * 100} className="h-4" />
        </div>

        <Card className={`p-8 mb-8 border-4 shadow-2xl animate-scale-in ${
          isFlood 
            ? 'bg-gradient-to-br from-blue-50 to-cyan-100 border-blue-300' 
            : 'bg-gradient-to-br from-orange-50 to-red-100 border-orange-300'
        }`}>
          <div className="flex items-start gap-6 mb-8">
            <div className="text-7xl animate-float">
              {isFlood ? 'üåä' : 'üî•'}
            </div>
            <h2 className="text-3xl font-bold text-foreground leading-tight">
              {currentQuestion.question}
            </h2>
          </div>

          <div className="space-y-4">
            {currentQuestion.options.map((option, index) => {
              const isSelected = selectedAnswer === index;
              const isCorrect = option.correct;
              const showResult = showExplanation && isSelected;

              return (
                <Button
                  key={index}
                  onClick={() => handleAnswer(index)}
                  disabled={showExplanation}
                  size="lg"
                  className={`w-full text-left text-lg py-8 px-6 h-auto justify-start font-bold border-4 transition-all duration-300 ${
                    showResult
                      ? isCorrect
                        ? 'bg-green-500 hover:bg-green-500 text-white border-green-600 animate-celebrate'
                        : 'bg-red-500 hover:bg-red-500 text-white border-red-600 animate-wiggle'
                      : isFlood
                      ? 'bg-blue-100 hover:bg-blue-200 text-blue-900 border-blue-300 hover:scale-105'
                      : 'bg-orange-100 hover:bg-orange-200 text-orange-900 border-orange-300 hover:scale-105'
                  }`}
                  variant={showResult ? 'default' : 'outline'}
                >
                  <span className="text-3xl mr-4">
                    {String.fromCharCode(65 + index)}
                  </span>
                  <span className="flex-1">{option.text}</span>
                  {showResult && (
                    <span className="text-3xl ml-4">
                      {isCorrect ? '‚úÖ' : '‚ùå'}
                    </span>
                  )}
                </Button>
              );
            })}
          </div>

          {showExplanation && (
            <div className="mt-8 animate-scale-in">
              <Card className={`p-6 border-4 ${
                scenarios[currentScenario].options[selectedAnswer!]?.correct
                  ? 'bg-green-50 border-green-400'
                  : 'bg-red-50 border-red-400'
              }`}>
                <p className="text-xl font-bold mb-3">
                  {scenarios[currentScenario].options[selectedAnswer!]?.correct
                    ? 'üéâ –ú–æ–ª–æ–¥–µ—Ü!'
                    : 'üí° –ó–∞–ø–æ–º–Ω–∏:'}
                </p>
                <p className="text-lg text-foreground font-medium">
                  {scenarios[currentScenario].options[selectedAnswer!]?.explanation}
                </p>
              </Card>

              <Button
                onClick={nextScenario}
                size="lg"
                className="w-full mt-6 text-xl py-8 font-bold bg-primary hover:bg-primary/90"
              >
                {currentScenario < scenarios.length - 1 ? (
                  <>
                    –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    <Icon name="ArrowRight" className="ml-2" size={24} />
                  </>
                ) : (
                  <>
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
                    <Icon name="Trophy" className="ml-2" size={24} />
                  </>
                )}
              </Button>
            </div>
          )}
        </Card>

        <div className="text-center animate-fade-in" style={{ animationDelay: '0.2s' }}>
          <Card className={`p-6 inline-block border-4 ${
            isFlood 
              ? 'bg-blue-50 border-blue-300' 
              : 'bg-orange-50 border-orange-300'
          }`}>
            <p className="text-lg font-bold text-muted-foreground">
              üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–∏—Ç–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –¥—É–º–∞–π –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
            </p>
          </Card>
        </div>
      </div>
    </div>
  );
}
